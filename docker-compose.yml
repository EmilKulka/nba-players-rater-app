services:
  backend:
    container_name: backend-service
    image: emilkulka12/backend-service:latest 
    ports:
      - "8080:8080"
    env_file:
      - .env
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL:?SPRING_DATASOURCE_URL not provided in .env file!}
      POSTGRES_USER: ${POSTGRES_USER:?POSTGRES_USER not proviced in .env file!}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD not provided in .env file!}
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    restart: always

  db:
    image: postgres:17
    container_name: local_pg
    environment:
      POSTGRES_USER: ${POSTGRES_USER:?POSTGRES_USER not provided in .env file!}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD not provided in .env file!}
      POSTGRES_DB: ${POSTGRES_DB:?POSTGRES_DB not provided in .env file!}
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
    restart: always

  pg_admin:
    image: dpage/pgadmin4
    container_name: local_pgadmin
    ports:
      - "8888:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:?PGADMIN_DEFAULT_EMAIL not provided in .env file!}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:?PGADMIN_DEFAULT_PASSWORD not provided in .env file!}
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    depends_on:
      db:
        condition: service_healthy
    restart: always

  frontend:
    container_name: frontend-service
    image: emilkulka12/frontend-service:latest  
    env_file:
      - .env
    environment:
      VITE_REACT_APP_API_BASE_URL: ${VITE_REACT_APP_API_BASE_URL:?VITE_REACT_APP_API_BASE_URL not provided in .env file!}
    ports:
      - "4173:4173"
    depends_on:
      backend:
        condition: service_healthy
    restart: always

volumes:
    pgdata:
    pgadmin-data:
